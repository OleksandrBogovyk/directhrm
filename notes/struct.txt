Структура приложения

Вначале общие замечания.

Принципы, положенные в основу организации приложения, являются отчасти субъективными без претензий на универсальность и абсолютную правильность.
Базовые тезисы.
	1.
	Классы не должны быть очень большими. Желательно до 2000 строк. Во-первых, это упрощает их понимание.
	Во-вторых, упрощает совместную разработку - уменьшает вероятность того, что двум разработчикам
	потребуется одновременно вносить правки в один и тот же класс.

	2.
	Классы должны минимально зависеть друг от друга. Изменения в одном классе, добавление новых классов,
	удаление старых классов должны приводить к минимальным (в идеале нулевым) правкам в других классах

При разработке десктоп приложений для реализации этих тезисов используется схема (паттерн) MVC (Model-View-Controller).
Сама схема MVC очень часто упоминается в разных статьях по дизайну приложений, но у нее очень размытое описание,
разные интерпретации. Поэтому, чтобы четче зафиксировать, что имеется в виду, вот как она понимается у меня.

View  <-------  Controller --------> Model


Классы View и Model ничего не знают друг о друге и "общение" у них идет только с контроллером.
Причем о контроллере они тоже, как правило, знают мало - просто отвечают на его вызовы и уведомляют
о каких-то событиях. А контроллер берет на себя все функции по координации взаимодействия.

Теперь об этом чуть более конкретно.

Model - это данные, работа с данными. У нас это группа классов из пакета db. Разбивка логики работы с базой данных
на несколько классов DbXXXManager делается исходя из тезиса 1. Здесь мы как-то манипулируем с базой данных.
Выполняем запросы, вносим какие-то изменения. Методы, которые вносят изменения, делятся на два типа -
исполнение "внутри" транзакции или весь метод и есть транзакция. Часто бывает нужно и один и другой варианты,
поэтому и создаются два набора методов. Например, метод DbDepartmentManager.updateDepartment(). 
Если нам нужно внутри одной транзакции обновить несколько подразделений, мы где-то стартуем транзакцию и
несколько раз вызываем updateDepartment с параметром Connection conn, после чего делаем commit.
Если же нам просто нужно обновить одно подразделение, мы вызываем вариант updateDepartment, 
который сам откроет транзакцию, внесет изменения в базу, сделает commit.
Очень часто, когда мы вносим изменения в базу, нам хочется как-то отреагировать на это в разных формах.
Но при этом также мы хотим, чтобы классы DbXXXManager не были в курсе, кто и как от этих изменений зависит.
Чтобы решить эту задачу, используется прием слушателей (Listener). Это один из подходов. Возможно есть и другие,
но я привык к этому. Этот прием также широко используется и в самом свинге.
Каждый раз, когда DbManager вносит изменение в базу данных, он формирует событие (DbEvent). После завершения
транзакции (commit) эти события рассылаются всем слушателям: dbManager.notifyListeners(events).
При этом DbManager в момент рассылки событий ничего не знает о том, какого рода слушатели к нему прицеплены,
как они реагируют на события и т.д. Таким образом, если в результате развития приложения нам понадобится
создать какую-то форму, которая реагирует на события в базе данных, нам ничего не прийдется доделывать в DbManager.
Так мы добиваемся реализации тезиса 2 - минимизируем зависимость классов.
Позже будет конкретный пример, который это демострирует.

View. В моем представлении это те классы, которые в нетбинсе мы не редактируем "руками", а "рисуем" при помощи
редактора форм. Как правило это JForm, JDialog, JPanel и т.п. Хотя нетбинс позволяет дописывать потом в этих классах
логику, я стараюсь этого не делать, а выносить ее (логику) в отдельные классы - контроллеры. Но догмы из этого не делаю.
Если какой-нибудь диалог простой, то в нем можно "слить" и вью и контроллер. Например, DlgDepartment

Controller. Это посредник между View и Model. Он выступает слушателем событий во вью
(нажата кнопка, отредактировано поле, выделена строка) и вызывает какие-то методы в DbManager. И наоборот.
Слушает сообщения от DbManager и вызывает какие-то методы во вью (например, перерисовать строку в таблице или узел в дереве после сохранения объекта).
Иногда контроллер может выступать посредником между другими контроллерами более низкого уровня.
Например, можно создать контроллер панели, который слушает клики в контроллере дерева и посылает сообщения в контроллер панели персоны.
Конечно, здесь как и везде важно сохранять баланс и не переборщить с дроблением функционала.
Иначе можно запутаться в обилии контроллеров.

Постараюсь проиллюстрировать преимущества этого подхода на примере.
Пусть у нас есть слева на панели дерево, а справа панель персоны.
Мы изменили фамилию персоны и нажали кнопку "Сохранить". При этом нам надо а) сохранить изменения в БД и б) перерисовать узел дерева с новой фамилией персоны.
В простом случае мы можем просто вызвать подряд два метода. Что-то вроде такого
dbManager.updatePerson(...)
tree.updateNode(...)
Потенциальные недостатки такого подхода.
Предположим, заказчик хочет, чтобы была возможность изменить фамилию в разных местах программы: на самой панели, в специальном отдельном диалоговом окне,
в какой-то другой панели. И каждый раз, когда мы вызываем dbManager.updatePerson(...), мы должны потом вызвать tree.updateNode(...).
Все классы, в которых есть правка и сохранение фамилии персоны, должны знать о существовании tree и иметь доступ к нему.
Далее. Заказчик просит дорисовать еще парочку полезных информационных панелей. Например, какую-то таблицу статистики по персонам.
И нам теперь каждый раз после правок персоны нужно вызывать не только tree.updateNode(...), но и еще какой-нибудь table.updateRow(...).
И сделать это во всех местах, где вызывается dbManager.updatePerson(...). И обеспечить доступ к table.
То есть правки в одном классе требуют внесения корректив в другие классы, а мы, вполне вероятно, можем забыть это сделать.

При подходе с рассылкой сообщений такой проблемы нет.
Когда мы вызываем dbManager.updatePerson(...), тот сохраняет персону в БД и рассылает уведомления об этом всем заинтересованным слушателям.
Контроллер дерева получит такое сообщение и отреагирует на него (перерисует узел). Если мы добавим возможность вносить правки их других мест,
ничего менять не нужно. Контроллер дерева получит сообщение независимо от того, где был вызван dbManager.updatePerson(...).
Если мы добавим таблицу со статистикой, то нам нужно сделать ее тоже слушателем dbManager и она будет нужным образом перерисовывать какие-то свои строки.
Тем классам, которые вызывают dbManager.updatePerson(...) беспокоиться об этом не нужно - им все равно, сколько слушателей у dbManager - один или десять.
То есть достигается независимость классов друг от друга.

Еще раз подчеркну, что не нужно из рекомендаций делать культа.
Если приложение небольшое с жестко оговоренным функционалом, то можно использовать
и первый, более простой подход. Но если ожидается бурное развитие приложения с кучей пожеланий от заказчика,
то желательно изначально заложить гибкость и устойчивость к изменениям в архитектуру.

Вот вкратце общие соображения. А теперь по мотивам коротенькое описание нашей конкретной структуры классов.
===========================================================================================================
Пакеты и классы
===========================================================================================================
directhrm.Application
	Это класс, который как бы является контроллером самого высокого уровня.
	Т.е. через него другие классы могут получить доступ к другим компонентам приложения.
	Также здесь осуществляется собственно запуск приложения (метод main).

directhrm.entity
	Классы в этом пакете соответствуют некоторым сущностям предметной области (персона, организация и т.д.)
	Как правило, эти классы очень просты: набор атрибутов и методы get/set.
	Грубо говоря, каждый такой класс соответствует таблице в БД, а атрибут - колонке в этой таблице.

directhrm.img
	Набор картинок. Чтобы облегчить доступ к картинкам из приложения создан класс Icons.
	Когда мы хотим получить картинку, нужно указать ее URL.
	Так как наш класс находится в том же пакете, что и сами картинки, то можно не заморачиваться с путями
	и использовать конструкцию вида Icons.class.getResource("person.png");

directhrm.util
	Набор общезначимых полезных утилит.
	Один из основных классов - Util, содержит набор всяких полезных статических методов

directhrm.db
	Набор менеджеров для работы с базой данных. Функционал распределяется между несколькими классами, чтобы
	DbManager не получился сильно разбухшим

directhrm.gui
	GuiUtil - набор полезных статических методов, специализированных для решения задач gui.

directhrm.gui.windows
	Это наше View. Набор классов, которые отвечают за отрисовку свинговских форм (диалоги, панели, формы)
	Некоторые простые варианты содержат в себе и логику (функции контроллеров): DlgDepartment, DlgOrganization

directhrm.action
	Классы, реализующие свинговский интерфейс Action. Выполняют некоторое действие по команде пользователя.
	Это действие может быть привязано к кнопке, пункту меню и т.д. Может быть привязано одновременно к нескольким
	кнопкам/пунктам меню (например, кнопка на тулбаре, пункт главного меню, пункт всплывающего меню).
	Это позволяет сконцентрировать код в одном месте, а не копипастить его.
	Все классы наследуют DirectHrmAction, что позволяет в нем накапливать общий код.
	В данный момент все экземпляры этих классов создаются в главном окне (MainWindow) и доступны другим классам
	через набор get...() методов

directhrm.controller
	Контроллеры для управления разными view

	ControllerDepartment, ControllerOrganization
		Устаревшие контроллеры для правки подразделений, организаций на одном листе с персоной.
		Поскольку идеология интерфейса была пересмотрена, они стали пока не нужны. Возможно, в будущем будут просто удалены.

	ControllerPerson
		Контроллер, который управляет панелью с информацией о персоне. На данный момент практически пуст.
		Его реализация - ближайшая перспектива.

	ControllerStruct
		Контроллер осуществляет общее управление закладкой Предприятия/Сотрудники.
		Основная задача - организовать взаимодействие между деревом структуры и контроллером/панелью персоны

	ControllerStructNode
		Родительский контроллер для ControllerDepartment, ControllerOrganization, ControllerPerson
		Когда эти три панели были наложены друг на друга и их контроллеры имели много общего, он имел смысл.
		После пересмотра интерфейса стал вырожденным и скорее всего будет удален.

directhrm.controller.tree
	Поскольку для контроллера дерева потребовалось несколько дополнительных вспомогательных классов,
	все они выделены в отдельный пакет

	CellRenderer
		Класс, отвечающий за отрисовку узла дерева (см.Свинг)

	ControllerStructTree
		Контроллер дерева. В начале работы читает информацию из БД и заполняет дерево.
		Слушает события от БД и, в случае необходимости, вносит изменения в дерево
		(добавляет/обновляет/удаляет узлы)

	NodeValue
		Значение узла дерева. Содержит ссылку на организацию или подразделение или персону.

	StructTreeModel
		Модель дерева в терминах Свинг. Реализует интерфейс TreeModel

	TreeNode
		Универсальный узел дерева с набором разных полезных методов по навигации, редактированию и прочему.
		Помимо ссылок на другие узлы (родитель, дети) содержит значение параметризованного типа, привязанное к этому узлу.
		В нашем случае это значение типа NodeValue.